<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ITWorks</title>
    <link>https://apollokwok.github.io/ITWorks/</link>
    <description>Recent content on ITWorks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://apollokwok.github.io/ITWorks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>English</title>
      <link>https://apollokwok.github.io/ITWorks/docs/kdatastore/en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apollokwok.github.io/ITWorks/docs/kdatastore/en/</guid>
      <description>Basic feature preview # view-kt view-java compose Setup # Get a sample or configure as below.
view groovy //region KDataStore android.lintOptions.disable &amp;#39;NonConstantResourceId&amp;#39; tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += &amp;#39;-Xcontext-receivers&amp;#39; } dependencies { implementation &amp;#39;io.github.shawxingkwok:kt-util:1.0.0&amp;#39; implementation &amp;#39;io.github.shawxingkwok:android-util-view:1.0.0&amp;#39; implementation &amp;#39;io.github.shawxingkwok:android-kdatastore:1.0.0&amp;#39; } //endregion kotlin //region KDataStore android.lintOptions.disable (&amp;#34;NonConstantResourceId&amp;#34;) tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += &amp;#34;-Xcontext-receivers&amp;#34; } dependencies { implementation (&amp;#34;io.github.shawxingkwok:kt-util:1.0.0&amp;#34;) implementation (&amp;#34;io.github.shawxingkwok:android-util-view:1.0.0&amp;#34;) implementation (&amp;#34;io.github.shawxingkwok:android-kdatastore:1.0.0&amp;#34;) } //endregion compose groovy //region KDataStore android.lintOptions.disable &amp;#39;NonConstantResourceId&amp;#39; tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += &amp;#39;-Xcontext-receivers&amp;#39; } dependencies { implementation &amp;#39;io.</description>
    </item>
    
    <item>
      <title>中文</title>
      <link>https://apollokwok.github.io/ITWorks/docs/kdatastore/cn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apollokwok.github.io/ITWorks/docs/kdatastore/cn/</guid>
      <description>KDataStore # 不同存储方案对比 # SharedPreferences MMKV DataStore KDataStore 机制 写入时先更新内存 commit 同步写入磁盘, 但堵塞主线程 1.4 ms 一般通过 apply 异步写入不论写入结果如何，通知监听 先读取到系统级别的内存同步不堵塞读写每隔一段时间后台异步写入磁盘 异步写入磁盘，成功后更新内存。通过 Flow 异步观察。 响应时间 2.1 ms 基于 DataStore 先读取到应用级别的内存 同步不堵塞读写数据更新时异步写入磁盘，包括备份文件。 采取事务(transactional) No, 但采用了 synchronized 操作和备份文件以改善 后续校验数据，尝试恢复，不行则删除 Yes Yes 读取中遇 IOException 返回默认值 返回默认值 自行 catch 处理 从备份文件中取 写入中遇 IOException 用未写入该数据的备份文件替换。 如用 commit, 可通过返回的 false 获悉 后续校验数据，尝试恢复，不行则删除。 自行 catch 处理 记录，下次启动时从备份文件中更新 CorruptionException 用空文件替换 后续校验数据，尝试恢复，不行则删除 自行 catch 处理 已通过复制备份文件数据处理 多进程共享 自行封装入 ContentResolver 支持 处于 alpha 阶段 DataStore 正式支持之后 加密 自行封装 支持 自行封装 支持 类型 常见基本类型 + String + Set&amp;lt;String&amp;gt; 常见基本类型 + String + Set&amp;lt;String&amp;gt; + Parcelable 常见基本类型 + String + Set&amp;lt;String&amp;gt; 常见基本类型 + String + enum + Serializable + KtSerializable + 自定义 额外信息 ANR前一刻更新的数据不会丢失 断电或者系统崩溃后容易丢失很多数据 见表格下方 微配置，调用方便 同时支持单项数据的 nullability (可空性) 和 default (默认值) 初启动时间为 10 ms，但数据显著增加并不会影响多少。如果介意亦可在 Application 中(或startup) 里异步启动 比较新， 但基于 DataStore 且代码较少, 仅 TODO 行， 即时有 Bug 也比较少。 以上测试结果采用 30 份 7(key length) * 20(value length) 的 String 数据。</description>
    </item>
    
  </channel>
</rss>
