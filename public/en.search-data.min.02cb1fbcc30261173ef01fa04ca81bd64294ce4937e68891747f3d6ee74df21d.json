[{"id":0,"href":"/ITWorks/docs/jvm/tracer/extensions/android/","title":"Android","section":"Extensions","content":" Most could be static # Provide static application context first.\nclass App : Application() { companion object{ @SuppressLint(\u0026#34;StaticFieldLeak\u0026#34;) lateinit var context: Context private set } override fun onCreate() { super.onCreate() context = applicationContext } } As App is always initialized at first and destroyed at last, applicationContext could be safely static for common Android developers, which could make most traditionally injected objects also static, likeDatabase, DAO and many related utils.\nSkip if you are using Compose. Learn the common tracer part first if you are not familiar. Setup # Add the dependency below common tracer. Groovy // Keep this version latest with the prefix not higher than your kotlin version. // Never put this above \u0026#39;tracer-common-compiler\u0026#39; ksp \u0026#39;io.github.shawxingkwok:tracer-android-view-compiler:1.7.20-1.0.1\u0026#39; Kotlin // Keep this version latest with the prefix not higher than your kotlin version. // Never put this above \u0026#39;tracer-common-compiler\u0026#39; ksp(\u0026#34;io.github.shawxingkwok:tracer-android-view-compiler:1.7.20-1.0.0\u0026#34;) Effect # Connects with activity/parentFragment\u0026rsquo;s interior elements with automatic requireActivity/requireParentFragment.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! ViewModel # I suggest to annotate your subclass of ViewModel with Tracer.Tip to avoid tracing insides.\nGithub repo "},{"id":1,"href":"/ITWorks/docs/jvm/tracer/usage/annotations/","title":"Annotations","section":"Usage","content":" Root # Each class with @Tracer.Root is considered as the trace start point, followed by its interior public/internal elements. You probably have seen this model in the home page.\nBuild Annotate the source class. Next build via the gradle tool. Your browser doesn\u0026rsquo;t support embedded videos, but don\u0026rsquo;t worry, you can download it and watch it with your favorite video player! Model Model with positions and the tracer interface. Your browser doesn\u0026rsquo;t support embedded videos, but don\u0026rsquo;t worry, you can download it and watch it with your favorite video player! Rebuild Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Inject Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Nodes # Now we add one bedroom and its some inner objects as below. As nodes grow on root or other nodes, Door LivingRoom and WifiRouter are all built once and each of them represents node; Bedroom is repeatedly built and represents nodes.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Tip # Tracer.Tip represents trace end, meaning elements of annotated classes wouldn\u0026rsquo;t be traced insides.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Context and the tracer interface are needless in a simple test. Omit # Properties and super types with @Tracer.Omit would be omitted, which is generally used with some unsupported new syntaxes, like T \u0026amp; Any before ksp 1.8.0-1.0.9(exclusive), and context receiver. Super type trace rules are later explained on page Details. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! abstract class makes inside abstract properties and functions needless to implement, which eases the test. "},{"id":2,"href":"/ITWorks/docs/android/kdatastore/en/","title":"English","section":"KDataStore","content":" This Chinese version and the Java extension are mainly used for initial promotion and will not have any other works. After supporting IOS, it will be moved to the Multiplatform mobile group. Comparison of Local Storage Solutions # SharedPreferences MMKV DataStore KDataStore Mechanism Synchronous read and write commit blocks the current thread apply does not block, but it is uncertain whether the write is successful. Regardless of whether the write is successful or not, the memory is updated and the listener is notified. Read from system-level memory first Synchronous and non-blocking read and write Asynchronously write to disk in the background Asynchronous read and write, update memory after successful write.\nAsynchronously observe through Flow. Based on DataStore Read from application-level memory first Synchronous and non-blocking read and write Asynchronously write to disk, including backup files, when data is updated. Performance (ms) Startup: 2.1 commit: 2.4 Startup: 2.6 Response: 8 Startup: 18 Little impact when file size significantly increases IOException during reading Returns default value Returns default value Handled by catching Retrieve from backup file IOException during writing Replaces with the backup file that has not been written, and no longer writes.\nIf using commit, can be determined by the returned false Subsequently verifies the data, attempts to recover, and deletes if unsuccessful. Records and updates from the backup file on the next startup Corruption Exception Replaces with an empty file Processes by copying data from the backup file Multi-process Self-encapsulated Supported In alpha stage After DataStore is officially supported Multi-platform Not supported Not supported Encryption Self-encapsulated Supported Self-encapsulated Requires importing other encryption libraries Type safety No No Yes Yes Support for types other than common basic types, String, Set\u0026lt;String\u0026gt; Parcelable Custom\nBut needs to be placed in an independent DataStore Kt Serializable (including common storage types)\nCustom Additional advantages Data updated until ANR is not lost Simple modeling, convenient to call Small size, jar on Android side is only 8 kb Additional disadvantages Easy to lose a lot of data after power failure or system crash Relatively new Modeling can only be done using Kotlin, Java-only developers need to have some knowledge of Kotlin. The above test results are based on 30 sets of String data with a length of 7 (key length) * 20 (value length), using the Meizu 18s model. The code is in the source code in the api\u0026rsquo;s androidTest.\nRegarding the comparison and analysis of storage solutions in other places, most of them have serious errors. The official website is relatively accurate, but also very one-sided. If you want to explore, it is recommended to test and consult the source code yourself. Basic Usage # Using Dark theme as an example\nUI Display # Modeling # Separate a Android module, commonly named settings. (Subsequent documents will follow the settings naming convention) About KDSFlow The liveData mentioned here is exclusive to Android and is not supported on other platforms. Invocation # Calling from other modules view-kt Observe Flow/LiveData in Activity/BasicActivity and bind the theme. The checked RadioButton will automatically change according to the user\u0026rsquo;s click, and the initial state can be set based on isDarkMode.value, no need to bind. Update the stored value in the RadioGroup listener. When observing Flow in a Fragment, it is recommended to use collectOnResume.\nview-java Observe LiveData in Activity/BasicActivity and bind the theme. The checked RadioButton will automatically change according to the user\u0026rsquo;s click, and the initial state can be set based on isDarkMode().getValue(), no need to bind. Update the stored value in the RadioGroup listener. compose Bind State with the theme\nUpdate the stored value at the RadioButton\nConfiguration # Configure the corresponding build.gradle, or refer to the demo in the source code.\nRoot directory # Groovy plugins{ ... id \u0026#39;org.jetbrains.kotlin.plugin.serialization\u0026#39; version \u0026#34;$version_kt\u0026#34; apply false } Kts plugins{ ... id (\u0026#34;org.jetbrains.kotlin.plugin.serialization\u0026#34;) version \u0026#34;$version_kt\u0026#34; apply false } Model module # Separate a module, commonly named settings, (if not adopted, the naming of subsequent settings will be changed accordingly) Choose kotlin as the language instead of java.\nGroovy plugins { ... id \u0026#39;kotlinx-serialization\u0026#39; } dependencies { ... implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kt-util:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:android-util-core:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; } Kts plugins { ... id (\u0026#34;kotlinx-serialization\u0026#34;) } dependencies { ... implementation (\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kt-util:1.0.0\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:android-util-core:1.0.0\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) } Caller side # Groovy view-kt tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:settings\u0026#39;) } view-java / compose dependencies{ ... implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:settings\u0026#39;) } Kts view-kt tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation (\u0026#34;io.github.implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;)shawxingkwok:android-util-view:1.0.0\u0026#34;) implementation (project(\u0026#34;:settings\u0026#34;)) } view-java / compose dependencies{ ... implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (project(\u0026#34;:settings\u0026#34;)) } Type Support # Kt Serializable is a serialization tool officially released by Kotlin. Its usage is similar to Java Serializable, but it is multi-platform and more than twice as fast. Classes marked with Serializable, basic types, enum, Pair, IntArray, default implementations of List, etc. can be considered as Kt Serializable, see kotlinx.serialization for details.\nWhen Not nullable, default value needs to be declared. When Nullable, default value is limited to null. For custom types, mutual conversion between Kt Serializable is required. Migration # Migrate from other storage repositories in the format shown in the figure (check existence -\u0026gt; migrate -\u0026gt; delete).\nFor example, taken from SharedPreferences In addition, the built-in delete and exist functions assist in migrating from KDataStore to elsewhere. Kt Java The warning is to prevent misuse, and there is no risk of any exceptions.\nOptional Parameters # For encryption, other encryption libraries need to be imported and a custom cipher needs to be created. Starting from API 29, Android introduced a sandbox mechanism, which achieved data isolation and is relatively secure. Reset # All # Kt Java Partial # For example, reset the declared isDarkMode Kt Settings.isDarkMode.reset() Java Settings.isDarkMode().reset(); Quick initialization # Call Settings in Application first asynchronously if you are concerned about its startup time (5-30 ms).\nGitHub Repo # "},{"id":3,"href":"/ITWorks/docs/multiplatform/kt-util/","title":"Kt util","section":"Multiplatform","content":" Setup # Repository: mavenCentral()\nDependency: \u0026quot;io.github.shawxingkwok:kt-util:1.0.0\u0026quot;\nDocument # GitHub repo # "},{"id":4,"href":"/ITWorks/docs/jvm/tracer/road-map/short-term/","title":"Short term","section":"Road map","content":" Ksp is aware of generated code -\u0026gt; Incremental processing, which makes build much faster.\nKsp is aware of whether x is private or not -\u0026gt; support var\n@Tracer.Root class Foo{ var x: Int = 1 private set var y: Int = 1 } ↓\nBackground generates\npublic val FooTracer.`_Int_Foo_x` inline get() = `_Foo`.`x` as Int public var FooTracer.`_Int_Foo_y` inline get() = `_Foo`.`y` as Int inline set(value){ `_Foo`.`y` = value } Ksp is aware of context receiver -\u0026gt; properties with context receiver won\u0026rsquo;t be traced, and you needn\u0026rsquo;t annotate them with Tracer.Omit\n"},{"id":5,"href":"/ITWorks/docs/jvm/tracer/","title":"Tracer","section":"Jvm","content":"As a tool with Kotlin-JVM, KSP and little configuration, Tracer generates extensional properties oriented to interior traceable elements, which realizes dependency injection in a novel way.\nGeneral Tracer Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! "},{"id":6,"href":"/ITWorks/docs/android/util-core/","title":"Util-core","section":"Android","content":" Contains only AppContext and KLog at present, and would be expanded with some small practical tools in the future. Setup # dependenceis{ ... implementation (\u0026#34;io.github.shawxingkwok:android-util-core:1.0.0\u0026#34;) } AppContext # It is the static applicationContext for you to get anywhere. In this way, your Database, DAO, NetService and some other tools could be static, of which the profit is much more considerable than the additional resource memory.\nCompanion extension trick # Declare static AppDatabase.INSTANCE and retrofit based on AppContext first, then DAO and Service could be created concisely. Call them easily. KLog # Tag is global and has a link. Logs are intelligently cancelled after released. Light-weight. (2kb in jar) Modify logcat view # Extend tag first. As for others, it\u0026rsquo;s my personal preferences. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Direct # obj\u0026rsquo;s type is Any? and printed out with its toString.\nOther levels # KLog.wtf is not provided. In my opinion, you\u0026rsquo;d better throw an error if fatal or use KLog.e if not.\nMore args # Tag prefix # Throwable # This is assignable only in KLog.e. Avoid tags too long # Make id, tagPrefix short, and avoid the file name too long, or else the link would fail. Special types # Useful KProperty0, common Array, and basic type arrays are specially handled, since their toString don\u0026rsquo;t tell values. Automatic cancel # Logs on level V, D and I are cancelled when not onDebug.\nAll logs from this library are automatically cancelled when the app is released.\nIn open source android library # Set an internal log object class. id should be an abbreviated all-caps library name for being easily distinguished from other tags. Remember to build the module if there is no directory \u0026lsquo;build\u0026rsquo;, or else you probably import BuildConfig from another library. Effect In each app submodule # Set a log class extended from KLog.InApp. Here sets id \u0026ldquo;DB\u0026rdquo;, supposing in the database module. Effect tag~:APP in the logcat could exclude logs from foreign libraries. Extend # Source code Extend as this. stackTrace in log is easily disturbed. Never call log indirectly like super... or set defaults for your function parameters. Or you could reference my concise fun log, KLog and design yourself.\nProvide position when inline # stackTrace is disturbed in inline functions and crossinline blocks. Specify tagPrefix with fileName in these cases. This problem also exists in links from other log libraries, and would be fixed by the kotlin standard library. Log out GitHub repo # "},{"id":7,"href":"/ITWorks/docs/jvm/tracer/road-map/long-term/","title":"Long term","section":"Road map","content":" Elements structure graph # This could be automatically generated background.\nLet hints \u0026lsquo;unused\u0026rsquo; unrelate to Tracer # For this example below, X and i are both later referenced by Tracer and are not grey anymore.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Highlighted name # It\u0026rsquo;s better for you to inject like private val bedroom get() = _Bedroom_House_masterBedroom in which Bedroom is expectedly displayed in another highlighted color.\nHidden hints # When you input code in a big project, too many tracer property name hints appear at present. (Only one in this example because this sample project is small)\n↓\nGenerated tracer property names wouldn\u0026rsquo;t appear until your input starts with _.\n"},{"id":8,"href":"/ITWorks/docs/jvm/tracer/usage/naming-rules/","title":"Naming rules","section":"Usage","content":" Position qualifiers # The code of model above is needless to see. For this injection:\nIn _Window_Bedroom_window Window: type Bedroom: owner class name window: property name __ : beginning with __ means outside. In this case, __Door tells that referenced element is outside Bedroom. ˚: Now we redesign Pillow as below. In class Cotton, tag after ˚ tells the nearest root or nodes. In addition, ˚ always appears when the corresponding root/nodes class is abstract/open, for being distinguished in subclasses as bar and x is traced below.\nType symbols conversion # Type symbols are converted as above, because android forbids most original common symbols in property names, making me choose these substitutes ⍒ ❨ ❩ → ‹ › ？ ， ✶ → ↑ ↓ instead.\nWildcard * would be tried converting to its bound and together with the covariance symbols ↑ ↓ if needed, like from from Array\u0026lt;*\u0026gt; to Array‹↓Any？› and List\u0026lt;*\u0026gt; to List‹Any？›. Comparable\u0026lt;*\u0026gt; is not convertible because its source code is Comparable\u0026lt;in T\u0026gt;.\nclass A{ class B } The nested class A.B would be converted to A․B in which ․ is not . These type symbol substitutes would be removed when each platform allow them in property names in the future. Generic types # Generic types are converted to their bounds, and with covariance (out) if not redundant.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Multiple bounds # T has two bounds which can be expressed in the first generated property. However, the second property type is limited by Super and two bounds can\u0026rsquo;t be expressed, which is told by ✕ in the name.\n"},{"id":9,"href":"/ITWorks/docs/jvm/tracer/setup/","title":"Setup","section":"Tracer","content":" Requires the kotlin plugin of version 1.8.0 or later. See module sample in the github repo or configure your build.gradle/build.gradle.kts as below.\nrepository: mavenCentral()\nplugin\nplugins{ // keep the prefix same with your kotlin version. id(\u0026#34;com.google.devtools.ksp\u0026#34;) version \u0026#34;1.8.0-1.0.9\u0026#34; } add this part directly, rather than insert messily. Groovy //region tracer // options // ksp.arg(\u0026#34;tracer.internal\u0026#34;, \u0026#34;\u0026#34;) tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kotlinOptions.freeCompilerArgs += \u0026#39;-Xcontext-receivers\u0026#39; } dependencies { implementation \u0026#39;io.github.shawxingkwok:tracer-annotations:1.0.0\u0026#39; ksp \u0026#39;io.github.shawxingkwok:tracer-compiler:1.0.0\u0026#39; } //endregion Kotlin //region tracer // options // ksp.arg(\u0026#34;tracer.internal\u0026#34;, \u0026#34;\u0026#34;) tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach { kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation (\u0026#34;io.github.shawxingkwok:tracer-annotations:1.0.0\u0026#34;) ksp (\u0026#34;io.github.shawxingkwok:tracer-compiler:1.0.0\u0026#34;) } //endregion "},{"id":10,"href":"/ITWorks/docs/android/util-view/","title":"Util-view","section":"Android","content":" Setup # Groovy tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.0\u0026#39; } Kotlin tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach { kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation(\u0026#34;io.github.shawxingkwok:android-util-view:1.0.0\u0026#34;) } Functions # Flow.collectOnResume # Is used in Fragment.onCreateView or Fragment.onViewCreated to collect flow with collector every Fragment.onResume.\nSwitch from\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) viewLifecycleOwner.lifecycleScope.launch { repeatOnLifecycle(Lifecycle.State.RESUMED) { flow.collect { ... } } } } to\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) flow.collectOnResume{ ... } } View.onClick # Sets a View.OnClickListener with a more precise View. KClass\u0026lt;out ViewBinding\u0026gt;.inflate # Returns a viewBinding via reflection, which helps you design view utils. KFragment # ViewBinding # You may have seen other libraries realized only via a generic parameter, which is, however, unsafe or time-consuming.\nabstrac class VBFragment\u0026lt;VB: ViewBinding\u0026gt; : Fragment() withView # Delegates a value alive between inclusive onViewCreated and exclusive onDestroyView.\nUsage sample:\nval adapter by withView{ Adapter() } var x by withView{ ... } KRecyclerViewAdapter # Core usage # Your browser does not support the video tag. The layoutManager is required. But I prefer putting it in xml. KRecyclerViewAdapter is not bound to KFragment but usable in general Activity/Fragment. And you could replace withView, collectOnResume, and onClick.\nupdate # These functions notify... are replaced with update now. update may be called too frequently, which makes some previous onFinish omitted. onHoldersCreated # In case you need to process ViewHolder after its automatic creation regardless of position. Here is allowed to set Listeners on view with adapterPosition to get data, which is, however, unclear. Just take this step in arrange which costs ignorable more memories.\nfinal functions # These functions are made final in KRecyclerViewAdapter.\nMore # On the way # KRecyclerViewAdapter: sticky header KFragment: delegates data stored in the hidden viewModel with observation. GitHub repo with demo # "},{"id":11,"href":"/ITWorks/docs/android/kdatastore/cn/","title":"中文","section":"KDataStore","content":" 这份中文版本和 Java 扩展主要用作初期宣传，其他作品并不会有。 在支持 IOS 之后会移到 Multiplatform mobile 分组中。 本地快捷存储方案对比 # SharedPreferences MMKV DataStore KDataStore 机制 同步读写 commit 堵塞当前线程 apply 不堵塞，但不知道是否成功写入磁盘。 不论是否成功写入，都更新内存，通知监听 先读取到系统级别的内存 同步不堵塞读写 后台定时异步写入磁盘 异步读写，写入成功后更新内存。\n通过 Flow 异步观察。 基于 DataStore 先读取到应用级别的内存 同步不堵塞读写 数据更新时异步写入磁盘，包括备份文件。 性能 启动: 2.1ms commit: 2.4ms 启动: 2.6ms 响应: 8.0ms 启动: 18.1ms 文件显著增加时影响不大 读取中遇 IOException 返回默认值 返回默认值 自行 catch 处理 从备份文件中取 写入中遇 IOException 用未写入该数据的备份文件替换，且不再写入。\n如用 commit, 可通过返回的 false 获悉 后续校验数据，尝试恢复，不行则删除。 记录，下次启动时从备份文件中更新 Corruption\nException 用空文件替换 通过复制备份文件数据处理 多进程 自行封装 支持 处于 alpha 阶段 DataStore 正式支持之后 多平台 不支持 不支持 加密 自行封装 支持 自行封装 需引入其他加密库 类型安全 否 否 是 是 除常见基本类型, String, Set\u0026lt;String\u0026gt; 外的类型支持 Parcelable 自定义\n但需放在独立的 DataStore 中 Kt Serializable (包括常见存储类型）\n自定义 额外优点 ANR前一刻更新的数据不会丢失 建模简单，调用方便 体积小，jar on Android side 仅 8 kb 额外缺点 断电或者系统崩溃后容易丢失很多数据 比较新 建模时只能使用 Kotlin, 只会 Java 的同学需稍掌握一点 Kotlin 知识。 以上测试结果采用 30 份 7(key length) * 20(value length) 的 String 数据，机型魅族18s。代码在源码中 api 的 androidTest。\n关于其他地方的存储方案对比分析，绝大多数都有严重错误。 官网相对准确，但也很片面。如想探究，建议自己测试并查阅源码。 基础用法 # 用 Dark theme 举例\nUI 展示 # 建模 # 单独分出一个 Android 模块, 常见命名为 settings。 （后续的文档均按照 settings） 关于 KDSFlow 其中的 liveData 为 Android 专供，在后续的其他平台上并不支持。 调用 # 在其他模块中调用 view-kt 在 Activity/BasicActivity 中观察Flow/LiveData，绑定主题。 checked RadioButton 会随用户点击自动变化，根据 isDarkMOde.value 设置起始状态即可，不用绑定。 在 RadioGroup 监听中更新存值。 在 Fragment 中观察 Flow 时建议采用 collectOnResume。 view-java 在 Activity/BasicActivity 中观察 LiveData，绑定主题。 checked RadioButton 会随用户点击自动变化，根据 isDarkMode().getValue() 设置起始状态即可，不用绑定。 在 RadioGroup 监听中更新存值。 compose 将 State 和主题绑定\nRadioButton处更新存值\n配置 # 配置相应 build.gradle, 或可见源码中的 demo。\n根目录 # Groovy plugins{ ... id \u0026#39;org.jetbrains.kotlin.plugin.serialization\u0026#39; version \u0026#34;$version_kt\u0026#34; apply false } Kts plugins{ ... id (\u0026#34;org.jetbrains.kotlin.plugin.serialization\u0026#34;) version \u0026#34;$version_kt\u0026#34; apply false } 模型模块 # 单独分出一个 module, 常见命名为 settings, （如果不采纳，后续的 settings 命名则一并更改） language 选择 kotlin 而非 java。\nGroovy plugins { ... id \u0026#39;kotlinx-serialization\u0026#39; } dependencies { ... implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kt-util:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:android-util-core:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; } Kts plugins { ... id (\u0026#34;kotlinx-serialization\u0026#34;) } dependencies { ... implementation (\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kt-util:1.0.0\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:android-util-core:1.0.0\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) } 调用方 # Groovy view-kt tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.0\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:settings\u0026#39;) } view-java / compose dependencies{ ... implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:settings\u0026#39;) } Kts view-kt tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation (\u0026#34;io.github.implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;)shawxingkwok:android-util-view:1.0.0\u0026#34;) implementation (project(\u0026#34;:settings\u0026#34;)) } view-java / compose dependencies{ ... implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (project(\u0026#34;:settings\u0026#34;)) } 类型支持 # Kt Serializable 为 Kotlin 官方出的序列化工具，用法类似 Java Serializable, 但多平台，且速度快两倍多。 被 Serializable 标记的 class, 基本类型，enum, Pair, IntArray, List 的默认实现等等均可视为 Kt Serializable, 详见 kotlinx.serialization。\nNot nullable 时需声明默认值。 Nullable 时默认值被限制为 null。 自定义时需实现与 Kt Serializable 之间的相互转换。 迁移 # 类比下图格式（判断存在 -\u0026gt; 迁移 -\u0026gt; 删除）从其他存储仓库迁移过来。\n比如取自 SharedPreferences 此外内置 delete, exist 两个函数辅助从 KDataStore 迁移到别处。 Kt Java 警告以防止误用，并无任何异常风险。\n可选参数 # 加密部分需引入其他加密库，自制 cipher。 Android 在 api 29 版本开始引入了沙盒机制，实现了数据隔离，相对已经很安全了。 重置 # 全部 # Kt Java 局部 # 比如重置声明过的 isDarkMode Kt Settings.isDarkMode.reset() Java Settings.isDarkMode().reset(); 快速启动 # 如果你介意这点启动时间(5～30 ms), 可先行在 Application 中异步调用 Settings。\nGitHub 仓库 # "},{"id":12,"href":"/ITWorks/docs/jvm/tracer/usage/details/","title":"Details","section":"Usage","content":" Suggested code order # Lazy # Use lazy when you need to construct some objects based on common injected elements.\nOverride style # Put it at the bottom to look better. Use get() = instead of = to avoid null when passing args. Pass args # ↓\nTracer interface conversion # Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! This would be needless in the expected new syntax.\nCompatibility with KSP # Tracer is compatible with ksp 1.7.0-1.0.6 at least. Although mostly it works well with ksp, you\u0026rsquo;d better try to make your ksp plugin in a high stable version to avoid bugs.\nElements built times display # Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Java, K/N \u0026amp; K/JS # Java, Kotlin/Native and Kotlin/JS are not supported, because they lack context receiver which is essential in this tool. But it\u0026rsquo;s absolutely safe to reference Java classes and functions in Kotlin files.\nInternally generated # Makes all generated code internal, which is commonly used in submodules. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Partial traceable super types # Trace ends # Elements or their type classes with features below are considered as trace ends, meaning they are never traced insides. Like classes with Tracer.Root, they should be designed independently and avoid being exploring too insides.\nTracer.Root, Tracer.Nodes or Tracer.Tip Interface, enum, object Nullable Foreign (from other modules, generated code, or Java files) Rebuilt symbols Constructor is not single and empty. Generic Abstract / open No _Int appears.\nType alias # Alias types are always converted to its actual types.\n\u0026nbsp;\u0026nbsp; "},{"id":13,"href":"/ITWorks/docs/jvm/tracer/road-map/new-syntax/","title":"New syntax","section":"Road map","content":" Automatic config # @Tracer.Root class House : HouseTracer{ override val _House get() = this } @Tracer.Nodes(House::class) class Bedroom(override val __House: House) : BedroomTracer { val bed = Bed() override val _Bedroom: Bedroom get() = this } context(BedroomTracer) class Bed{ private val house get() = __House } ↓\nroot class House nodes(House) class Bedroom{ val bed = Bed() } tracer(Bedroom) class Bed{ private val house get() = __House } Automatic hidden generation # When you finish inputting val masterBedroom = Bedroom() in root class House, you could inject like private val bedroom get() = _Bedroom immediately without building.\nNullable elements are insides traceable and flexibly hinted # root class A{ var b: B? = null private val name: String? get() = _String_C_name } class B{ val c = C() private val name: String get() = _String_C_name } class C{ val name = \u0026#34;Apollo\u0026#34; } "},{"id":14,"href":"/ITWorks/docs/jvm/tracer/usage/notes/","title":"Notes","section":"Usage","content":" Failed code inspection # Few generated types fail code inspection, mostly because of the imperfect official type. For the example below\nTherefore, I cast them in generated code.\nHowever, some types are incorrectly inferred and error shows even cast, whereas I forget those examples unfortunately. Use another source type or annotate them with Tracer.Omit.\nInaccurate * in typealias # * in alias types are all shifted first and then converted, which, however, may be inaccurate.\nFor source code\ninterface A\u0026lt;T: Iterable\u0026lt;String\u0026gt;\u0026gt; interface B\u0026lt;T: List\u0026lt;CharSequence\u0026gt;\u0026gt; typealias MyTypeAlias\u0026lt;T\u0026gt; = Pair\u0026lt;A\u0026lt;T\u0026gt;, B\u0026lt;T\u0026gt;\u0026gt; The real bound is List\u0026lt;String\u0026gt;, which is only one of those difficult cases. With Tracer, MyTypeAlias\u0026lt;*\u0026gt; is converted to Pair\u0026lt;A\u0026lt;*\u0026gt;, B\u0026lt;*\u0026gt;\u0026gt; first, and Pair\u0026lt;A\u0026lt;out Iterable\u0026lt;String\u0026gt;\u0026gt;, B\u0026lt;out List\u0026lt;CharSequence\u0026gt;\u0026gt;\u0026gt; next.\nThis could be fixed if one day kotlin requires generic bounds for typealias like\ntypealias MyTypeAlias\u0026lt;T: List\u0026lt;String\u0026gt;\u0026gt; = Pair\u0026lt;A\u0026lt;T\u0026gt;, B\u0026lt;T\u0026gt;\u0026gt; Never use special characters in class names # Class A•A is imported as `A•A` because of special symbols which, however, are hard to adapt. At present, Tracer doesn\u0026rsquo;t support this import style in the generated code.\n"},{"id":15,"href":"/ITWorks/docs/jvm/tracer/usage/demo/","title":"Demo","section":"Usage","content":"Now try this demo to practice. Transit from the general realization to tracer in which horsepower, engineCapacity, outTireRadius and innerTireRadius are flexible. The source code is in Tracer.sample. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! "},{"id":16,"href":"/ITWorks/docs/jvm/tracer/road-map/","title":"Road map","section":"Tracer","content":"Tracer is not perfect, but could be much optimized if incorporated in the new kotlin plugin and adapted by each popular IDE.\n"},{"id":17,"href":"/ITWorks/post/about/","title":"About","section":"Post","content":"This website displays most of my personal open-source works which are all written in Kotlin and licensed with Apache 2.0 at present. Note that only \u0026lsquo;Android.KDataStore\u0026rsquo; considers well Java supports.\nMy code is probably the globally best at present for its functionality, creativity, difficulty, structure, efficiency, and beauty. Wish you could learn from it！I also encourage those authorities to provide better tutorials with embedded short videos instead of all voluminous words.\nIn addition, if you are familiar with IT, feel hard to learn Kotlin and love Java or Go more, your logic ability mustn\u0026rsquo;t be well enough for you to engage in IT. If so, do something you love and must excel at. I have no offensive intention, just meaning everyone has his strengths and weaknesses, and every job has its threshold.\nAt last, I have two other halfway wonderful works and am waiting for some top company to help make IDE plugins. I have sent resumes to common top IT companies, but those limited resume sizes are too small and they didn\u0026rsquo;t give me opportunities to display.\nWelcome to visit my or contact with me via .\n"},{"id":18,"href":"/ITWorks/post/license/","title":"License","section":"Post","content":" This license applies to all the works on this website. Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\nDefinitions.\n\u0026ldquo;License\u0026rdquo; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\u0026ldquo;Licensor\u0026rdquo; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\u0026ldquo;Legal Entity\u0026rdquo; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u0026ldquo;control\u0026rdquo; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\u0026ldquo;You\u0026rdquo; (or \u0026ldquo;Your\u0026rdquo;) shall mean an individual or Legal Entity exercising permissions granted by this License.\n\u0026ldquo;Source\u0026rdquo; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\u0026ldquo;Object\u0026rdquo; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\u0026ldquo;Work\u0026rdquo; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\u0026ldquo;Derivative Works\u0026rdquo; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\u0026ldquo;Contribution\u0026rdquo; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u0026ldquo;submitted\u0026rdquo; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u0026ldquo;Not a Contribution.\u0026rdquo;\n\u0026ldquo;Contributor\u0026rdquo; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n(d) If the Work includes a \u0026ldquo;NOTICE\u0026rdquo; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u0026quot;[]\u0026quot; replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u0026quot;printed page\u0026quot; as the copyright notice for easier identification within third-party archives. Copyright 2023 Shawxing Kwok\nLicensed under the Apache License, Version 2.0 (the \u0026ldquo;License\u0026rdquo;); you may not use this file except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n"}]