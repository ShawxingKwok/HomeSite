[{"id":0,"href":"/ITWorks/docs/multiplatform/mvb/android/","title":"Android","section":"MVB","content":" Abstract # MVB is my new architecture standing for Model-View-Bridge. Now, it only has an Android implementation, but the pattern is applicable to every platform that supports Kotlin. The UI part uses the traditional View without DataBinding, and the Kt part hides ViewModel, resulting in much less code and clearer logic.\nOther points:\nCompose is the most concise declarative UI framework, and also the most flexible in terms of custom views. However, its recombination mechanism inevitably reconstructs massive objects, resulting in its low upper performance limit.\nRegarding navigation parameters for Activity / Fragment, I have a proposal on Reddit.\nRecyclerView.Adapter is the most common among components with complex writing styles, whereas my encapsulated KRecyclerViewAdapter arranges list items as Compose.\nFor the UI part, I have a new design pattern proposal of which the expected effect is much better than Compose and Flutter.\nOverall, I suggest MVB if you haven\u0026rsquo;t switched to Compose from View at present. In the future, there would be a new imperative UI mode based on that proposal implementation in which MVB mode would still work.\nSetup # Groovy android{ buildFeatures { viewBinding true } } tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.8\u0026#39; implementation \u0026#39;io.github.shawxingkwok:mvb-android:1.0.7\u0026#39; } Kotlin android{ buildFeatures { viewBinding = true } } tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach { kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation(\u0026#34;io.github.shawxingkwok:android-util-view:1.0.8\u0026#34;) implementation(\u0026#34;io.github.shawxingkwok:mvb-android:1.0.7\u0026#34;) }` Usage # Examples are all with Fragment, but also applicable on ComponentActivity (a super class of AppCompatAtivity). rmb # This is the abbreviation of remember, meaning the value is alive across the configuration change (e.g. rotation). Switch from the traditional way as below. ↓\nInitialization of the property declared with val is synchronized. save # Direct # Saved values are not only alive across the configuration change, but also restorable from the killed process.\nCommon ↓\nFlow ↓\nLiveData ↓\nSaved value types should follow Parcelize rules. Please note that there is a mistake in the official document. Set is actually saved as Serialziable and can\u0026rsquo;t keep Parcelable. I suggest to use Flow instead of LiveData, though it takes some time to learn. Rules below are same to saveMutableStateFlow, saveMutableSharedFlow, saveMutableLiveData, and not limited with val / var. Transform # You could also save values with any type by appending transform after save with the converted values following Parcelize rules. The lambda convert keeps alive after its lifecycle owner is killed by the application. Therefore, don\u0026rsquo;t reference callables from its owner to avoid memory leaks. Parcelable component # Sometimes you need to pass KClass\u0026lt;out Parcelable\u0026gt; as the parcelable component. Besides, there could be no more than 1 parcelable subtype. observe # The delegated values via rmb / save are easily observable if it\u0026rsquo;s Flow / LiveData. The latter observe lambdas are active between every onStart and onStop, which is generally used for linking value to UI state. ↓\nmvbScope # This is viewModelScope of the hidden MVBViewModel. This coroutineScope is not affected by the configuration change, and cancelled only when its owner ComponentActivity / Fragment is killed by user presses back or low memory. Besides, it\u0026rsquo;s not static but actually an extensive property. Check out the source code, and you will find there is no memory leak. Format # Take an example of simulating the stopwatch page in the IOS clock with concise code below.\nUtils and Components for reusable and complex parts # See KRecyclerViewAdapter if it\u0026rsquo;s new to you. Static processing # For example, declaring components and enabling them in ComponentActivity.onCreate / Fragment.onViewCreated Bridge # Declaring variable data sources via rmb and save, and linking them to UI state via appending observe. Fixed listeners # I suggest to put fixed listeners here or below, allowing for variating data source or navigating to other pages. Or this style Some functions from other libraries are independent with MVB, e.g. binding(XxBinding::bind), onClick, and updateIf. GitHub repo # "},{"id":1,"href":"/ITWorks/docs/jvm/tracer/extensions/android/","title":"Android-view","section":"Extensions","content":" Skip if you are using Compose. Since the static applicationContext could be provided, dependency injection is not so needful on Android now. Use this tracer extension if you are familiar with tracer and interested. Setup # Add this dependency below tracer-compiler.\n// Never put this above \u0026#39;tracer-compiler\u0026#39; ksp (\u0026#34;io.github.shawxingkwok:tracer-android-view-compiler:1.0.0-1.0.0\u0026#34;) Effect # Connects with activity/parentFragment\u0026rsquo;s interior elements with automatic requireActivity/requireParentFragment.\nGenerated code For the example of public SharedViewModel in MainActivity, I suggest annotating the subclass of ViewModel with Tracer.Tip to avoid tracing insides.\nGitHub repo # "},{"id":2,"href":"/ITWorks/docs/jvm/tracer/usage/annotations/","title":"Annotations","section":"Usage","content":" Tracer annotations package is pers.shawxingkwok.tracer rather than that in videos. Introduction # The pictures above highlight the disadvantages of the general model style. Now, with Kotlin-JVM, KSP, and minimal configuration, Tracer generates extensional properties oriented toward internal traceable elements, which realizes dependency injection in a novel way.\nTracer has several main advantages over common DI tools, as listed below:\nMinimal configuration. Powerful: generic types and variances are parsable, and it can trace super types as well. Fast: operates without runtime cache or reflection. Contents below tell how Tracer models and extends relationships as shown in the top picture.\nRoot # Each class with @Tracer.Root is considered as the trace start point, followed by its interior public/internal elements.\nAnnotate the source class (House in this case) with Tracer annotations.\nBuild.\nModel with the generated tracer interfaces (HouseTracer). Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Rebuild. There generates element traces as below. Inject Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! The renaming problem could be solved by an IDE plugin that has not come out yet. Nodes # There are some traced properties with the same type. If all their interior properties are traced with recurse from the root class, the generated traces would be huge and chaotic. Considering from a different perspective, repeatedly constructed objects should maintain independence in design, so that they do not require deep exploration when called. Take the example of a car model, you might access the cost of the wheels from the outside, but there is no need to drill down to the specific prices of the tires and axles.\nNow we add one bedroom and its some inner objects as below. As nodes grow on root or other nodes, Door LivingRoom and WifiRouter are all built once and each of them represents node; Bedroom is repeatedly built and represents nodes.\nNow objects in the left picture are traced in the file HouseElements, and objects in the right picture are traced in the file BedroomElements. Note that, OuterHouseTracer is extended by BedroomTracer, making HouseElements starting with double _ acquirable from BedroomTracer.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Generated code House Bedroom Tip # Tracer.Tip represents the trace end, which means the carrier\u0026rsquo;s elements are never traced.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Context and the tracer interface are needless in a simple test. Elements or their type classes with features below are also considered as trace ends, meaning they are never traced insides. Like classes with Tracer.Root, they should be designed independently and avoid being exploring too insides.\nTracer.Root, Tracer.Nodes Interface, enum, object Nullable Foreign (from other modules, generated code, or Java files) Rebuilt symbols Constructor is not single and empty. Generic Abstract / open Those x are not traced. Omit # Properties and super types with @Tracer.Omit would be omitted, which is generally used with some unsupported new syntaxes, like context receiver. Super type trace rules are later explained on page \u0026lsquo;Details\u0026rsquo;.\nSource code i with context receiver is omitted in generated code now. Tracer interfaces are not essential to implement in simple tests. "},{"id":3,"href":"/ITWorks/docs/android/kdatastore/en/","title":"English","section":"KDataStore","content":" Abstract # KDataStore is my local persistent Android storage solution based on Jetpack\u0026rsquo;s DataStore. The emphasis on optimizations is as follows:\nSingleton mode. Generating key through delegation. Adapting MutableStateFlow for real-time observation, synchronous reading and writing with memory, and asynchronous writing to disk. Backing up data to handle exceptions. Supports extensive types, e.g. Kotlin Serializable, Customized, Nullable. See the GitHub repository (includes demo) for more information.\nJava support is for the initial promotion and not considered in my other works. This page will be moved to Multiplatform after IOS support. Competitor comparison # SharedPreferences MMKV DataStore KDataStore Performance Startup: 2.5ms Reading: negligible time consumption. Writing with commit: blocking for 2.3ms Writing time consumption with applyis negligible, but it is unsure if the data has been successfully written to disk asynchronously. Startup: 2.3ms Reading and writing: negligible time consumption All are performed asynchronously, so only response time consumption is measured: 8.6ms Startup: 13.5ms This impact is not significant when the file size increases substantially, and it can be also resolved by calling the KDataStore subclass asynchronously in the Application. Reading and writing time consumption is negligible. Type safety No No Yes Yes Support for types other than common basic types, String, and Set\u0026lt;String\u0026gt; Parcelable Customizable\nHowever, it needs to be placed in an independent DataStore KtSerializable (including common storage types）\nCustomizable Exception during reading Returns a empty HashMap, which means returning defaults for all Manual catch Gets from backup file IOException during writing Replaces with the backup file without the data, and do not write again. Returns false if via commit Only catch without handling. Records at once. Update from backup file at next startup Multiprocess Manual encapsulation Supported In 1.1.0-alphastage After DataStore 1.1.0 releases Multiplatform Not supported Supported Crypto Manual encapsulation Supported Manual encapsulation You need to choose a crypto protocol and customize a cipher. Additional advantages Data updated before ANR will not be lost Small size, jar on Android side is only 12.6 kb Additional disadvantages After a power outage or system crash, a lot of data is likely to be lost Quite new Modeling requires Kotlin. Java is only supported on caller side. The test results above are based on 30 sets of String data of Meizu 18s. Source code is in KDataStore.benchmark.\nThere are serious errors in most storage scheme comparison analysises from other information sources. The official website is relatively accurate, but very one-sided. If you want to explore further, I recommend you test it yourself and view the source code for deep exploration. Basic Usage # Take the example of switching darkTheme with the stored Boolean.\nModel # Set an independent Android module, commonly named settings. All namings in the following documents refer to settings. About KDSFlow actual KDSFlow on Android Call # Call in other modules view-kt Observe Flow/LiveData in Activity/BasicActivity and bind the theme. Checked RadioButton will change with the user\u0026rsquo;s click. Just set the initial state according to isDarkMode.value rather than bind. Update the stored value in the RadioGroup listener. collectOnResume is recommended to observe Flow in Fragment, of which the setup is included in the following. view-java Observe LiveData in Activity/BasicActivity and bind the theme. Checked RadioButton will change with the user\u0026rsquo;s click. Just set the initial state according to isDarkMode.value rather than bind. Update the stored value in the RadioGroup listener. compose Bind state and theme\nUpdate stored value at RadioButton\nSetup # Configure build.gradle/build.gradle.kts as below, or reference the demo in Github which uses version catalog.\nRoot Directory # Groovy plugins{ ... id \u0026#39;org.jetbrains.kotlin.plugin.serialization\u0026#39; version \u0026#34;$version_kt\u0026#34; apply false } Kotlin plugins{ ... id (\u0026#34;org.jetbrains.kotlin.plugin.serialization\u0026#34;) version \u0026#34;$version_kt\u0026#34; apply false } Model module # Groovy plugins { ... id \u0026#39;kotlinx-serialization\u0026#39; } dependencies { ... implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1\u0026#39; implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kt-util:1.0.2\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; } Kotlin plugins { ... id (\u0026#34;kotlinx-serialization\u0026#34;) } dependencies { ... implementation (\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kt-util:1.0.2\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) } Caller Side # Groovy view-kt tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.8\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:modelModuleName\u0026#39;) // or remote library } view-java / compose dependencies{ ... implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:modelModuleName\u0026#39;) // or remote library } Kotlin view-kt tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:android-util-view:1.0.8\u0026#34;) implementation (project(\u0026#34;:modelModuleName\u0026#34;)) // or remote library } view-java / compose dependencies{ ... implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (project(\u0026#34;:modelModuleName\u0026#34;)) // or remote library } Include KDataStoreInitializer::class.java in dependencies, in case this caller module introduced startup-runtime. Type Support # kotlinx.serialization usage is similar to Java Serializable, but multiplatform and more than twice as fast. Classes annotated with Serializable, basic types, enum, Pair, IntArray, List\u0026rsquo;s default implementation and some others can be considered as Serializable.\nWhen non-null, a default value must be declared. When nullable, the default value is restricted to null. Edit in a stored object would not trigger the disk update.\nMigration # Migrate from other storage repositories with this format (judge existence -\u0026gt; migrate -\u0026gt; delete) in which appContext is from KDataStore.\nTake the example of migrating from SharedPreferences. Additionally, there are two built-in functions, delete and exist, that assist in migrating from KDataStore to other places. Kt Java Warning is for preventing misuse rather than exception risks.\nOptional arguments # For the cipher part, you need to choose a crypto protocol from Java standard library, or other libraries to customize it.\nData isolation was introduced in Android API 29, making it relatively safe without crypto which approximately doubles the startup time. Reset # All # Kt Java Partial # Take the example of isDarkMode. Kt Settings.isDarkMode.reset() Java Settings.isDarkMode().reset(); "},{"id":4,"href":"/ITWorks/docs/multiplatform/phone/","title":"Phone","section":"Multiplatform","content":" Abstract # Currently, client platforms connect to the server with one of the following methods:\nA predefined document, which is common yet cumbersome and prone to errors due to the varying message formats across different routes and HTTP methods.\nAn RPC (remote procedure call) framework that is hard to get context and requires either:\nA third-party language to define shared interfaces and data types. A uniform language across all clients and servers, which can be notably restrictive. For example, Java cannot be used on browsers and iOS. To address these issues, I developed this new RPC framework named Phone, based on the increasingly favored Kotlin Multiplatform and its web framework Ktor. Phone is poised to greatly promote the use of Kotlin Multiplatform and to be revolutionary together with it.\nPhone offers key advantages:\nIt facilitates connections using shared interfaces, data types, and associated logics. It provides robust support and straightforward configuration for essential features, including various HTTP methods, authentication, WebSocket, PartialContent, cryptography, and automated serialization. It allows for custom extensions through the use of Route on servers, and HttpRequestBuilder and HttpResponse on clients, which are intuitively powerful due to their Ktor origin. It\u0026rsquo;s compatible with the traditional way. For instance, there may be a client using C++. It can connect to the server with the traditional Json conversion, manual routes, and HTTP methods. It\u0026rsquo;s not essential to replace all JavaScript with Kotlin-Js on the browser side, because the generated Phone.kt is callable from JavaScript. Core usage sample # Other platforms are also supported, e.g. iOS and wasm.\nShared Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Server Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Browser Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Android Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Setup # Kotlin version is required at least 1.9.0. Get familiar with Ktor first. Create three modules of which all could be multiplatform, configure them as below in build.gradle.kts, and implement them in server and each client.\nshared plugins { val kt = \u0026#34;1.9.0\u0026#34; kotlin(\u0026#34;multiplatform\u0026#34;) version kt id (\u0026#34;com.google.devtools.ksp\u0026#34;) version \u0026#34;$kt-1.0.13\u0026#34; kotlin(\u0026#34;plugin.serialization\u0026#34;) version kt } repositories { mavenCentral() } kotlin { jvm{ jvmToolchain(8) } js{ browser() } // other needed native platforms sourceSets { val commonMain by getting{ dependencies{ api(\u0026#34;io.github.shawxingkwok:phone-runtime:1.0.0\u0026#34;) implementation(\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-core:1.6.0\u0026#34;) api(\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0\u0026#34;) } } } } dependencies { // other platforms are needless here, because this compiler generates code and copy them to else where. add(\u0026#34;kspJvm\u0026#34;, \u0026#34;io.github.shawxingkwok:phone-compiler:1.0.0-1.0.0\u0026#34;) } ksp{ // set your own local path arg(\u0026#34;phone.server-package-path\u0026#34;, \u0026#34;${projectDir.parent}/serverside/src/commonMain/kotlin\u0026#34;) arg(\u0026#34;phone.client-package-path\u0026#34;, \u0026#34;${projectDir.parent}/clientside/src/commonMain/kotlin\u0026#34;) arg(\u0026#34;phone.server-package-name\u0026#34;, \u0026#34;pers.shawxingkwok.server.phone\u0026#34;) arg(\u0026#34;phone.client-package-name\u0026#34;, \u0026#34;pers.shawxingkwok.client.phone\u0026#34;) arg(\u0026#34;phone.default-method\u0026#34;, \u0026#34;post\u0026#34;) // optional // arg(\u0026#34;phone.jwt-auth-name\u0026#34;, \u0026#34;\u0026lt;your jwt auth name\u0026gt;\u0026#34;) // arg(\u0026#34;phone.client-phone-modifiers\u0026#34;, \u0026#34;internal abstract\u0026#34;) // \u0026#34;open\u0026#34; by default } server side plugins { kotlin(\u0026#34;multiplatform\u0026#34;) version \u0026#34;1.9.0\u0026#34; } repositories { mavenCentral() } kotlin { jvm{ jvmToolchain(8) } // other needed native platforms sourceSets { val commonMain by getting{ dependencies{ implementation(\u0026#34;io.github.shawxingkwok:phone-runtime:1.0.0\u0026#34;)) api(project(\u0026#34;:example:api:shared\u0026#34;)) // or the remote implementation(\u0026#34;io.ktor:ktor-server-core:\u0026lt;ktor_version\u0026gt;\u0026#34;) } } } } client side plugins { kotlin(\u0026#34;multiplatform\u0026#34;) version \u0026#34;1.9.0\u0026#34; } repositories { mavenCentral() } kotlin { jvm{ jvmToolchain(8) } js{ browser() } // other needed native platforms sourceSets { val commonMain by getting{ dependencies{ implementation(\u0026#34;io.github.shawxingkwok:phone-runtime:1.0.0\u0026#34;)) api(project(\u0026#34;:example:api:shared\u0026#34;)) // or the remote implementation(\u0026#34;io.ktor:ktor-server-core:\u0026lt;ktor_version\u0026gt;\u0026#34;) } } } } Http methods # The default http method is indispensable and configured in shared module build.gradle.kts. The options are get, post, put, delete and patch which could start with an uppercase char. The http method of login in this case is Post. Default methods could be overridden in Phone.Api. Methods for each function could also be separately set. Now login method is Post, and search method is Get. Calls # In this section, all parameters and generic type are not limited. Examples run on Jvm. There are multiple Ktor ways of handling file stream in body. Each platform also handles differently. Common # This is the most common case. client server Remember to use Unit if the returned value is needless. You could also upload files easily as below. client server Manual # With Phone.Call.Manual, client also gets HttpResponse which is generally for downloading files. The generic type is not limited to Pair\u0026lt;String, Long\u0026gt;. client server PartialContent # Required server plugin: PartialContent and AutoHeadResponse client Type of the handler\nThe parameter ranges is vararg. If you pass no LongRange, you would get the whole file.\nserver Responds File / Stream / ByteReadChannel as before. WebSocket # Required server and client plugins: WebSockets client You will get the parameter enablesWss in the Phone constructor.\nRequest\nI suggest to use onReceivedSuccess instead.\nThis function is generated in module clientside.\nserver You could set isRaw to true and get ClientWebSocketSession and ServerWebSocketSession on server and client sides. Parameter positions # You may be concerned about the actual parameter positions because URL is sometimes a bad choice. Actually, Phone puts parameters in a form as long as the HTTP method is not Get and the HttpRequest body is empty. If you set the body before request in this way, the parameters would be put in URL.\nPhone.DemoApi{ setBody(...) } ... Crypto # Cipher # First you need to provide a Cipher in module shared with customed protocol with other Kotlin multiplatform Crypto libraries.\nTargets # Next you could annotate these symbols with Phone.Crypto. The top Phone.Crypto means all messages in DemoApi will be encrypted. The next Phone.Crypto on the function login means all messages related to this function will be encrypted. For parameters, annotating it or its type makes the same sense. Annotating the returned Any makes LoginResult crypto. For this login case, I suggest annotating Phone.Crypto only on the function.\nSerialize third-party types # Suppose class Time is from a third-party library and is not adapted with Kotlin Serializable. You could set a serializer annotated with Phone.Serializer. Note that it\u0026rsquo;s not as intelligent as the original Kotlin serialization. A single TimeSerializer is not enough for cases below.\nThese are the actually paired serializers. Extend # The source code is open with options. client You could make the generated Phone internal abstract instead of open via ksp args. And then set a public subclass.\nksp{ arg(\u0026#34;phone.client-phone-modifiers\u0026#34;, \u0026#34;internal abstract\u0026#34;) } server onStart is background called as below.\nAuth # Required server plugin: Authentication\nRequired client plugin: Auth Learn the auth part in Ktor if you are not familiar with it. Then you could get the point in this section easily.\nAnnotation Phone.Auth Generated code in the route function. Attentions\nFor JWT, at first tell Phone the jwt auth name in build.gradle(.kts) in module shared as below.\nksp { arg(\u0026#34;phone.jwt-auth-name\u0026#34;, \u0026#34;\u0026lt;your-auth-name\u0026gt;\u0026#34;) } Then you could refresh the jwt token on client as before, and put it in phone via phone.refreshJwtToken(token). Then each request header needing the JWT token would get it.\nFor the form authentication, avoid using HttpMethod.Get.\nFor WebSockets, JWT is more suggested than general authentications. Besides, the configured client authentication info would not be put into HttpHeader as common Http requests. If you apply basic authentication on a WebSocket route, you should extend the request with specific header info before you proceed.\nphone.CompoundApi{ header(HttpHeaders.Authorization, \u0026#34;Basic \u0026#34; + \u0026#34;jetbrains:foobar\u0026#34;.encodeBase64()) } ... For OAuth\nShared api Server side Polymorphic functions # For the backward compatibility, polymorphic functions except the first are required to declare the distinct id. Exception # You could intercept exceptions and respond a status code with the Ktor plugin StatusPages. All status codes except HttpStatusCode.OK means failure. I suggest to only respond 400 or 500 with messages for exceptions.\nRoadmap # Documents and api generation for other languages. Big binary data as parameters, and limited permission with a new context. call.parameters, call.respond and some other needless functions are invisible. GitHub repo # "},{"id":5,"href":"/ITWorks/docs/jvm/tracer/road-map/short-term/","title":"Short term","section":"Road map","content":" Ksp is aware of generated code -\u0026gt; Incremental processing, which makes build much faster.\nKsp is aware of whether x is private or not -\u0026gt; support var\n@Tracer.Root class Foo{ var x: Int = 1 private set var y: Int = 1 } ↓\nBackground generates\npublic val FooTracer.`_Int_Foo_x` inline get() = `_Foo`.`x` as Int public var FooTracer.`_Int_Foo_y` inline get() = `_Foo`.`y` as Int inline set(value){ `_Foo`.`y` = value } Ksp is aware of context receiver -\u0026gt; properties with context receiver won\u0026rsquo;t be traced, and you needn\u0026rsquo;t annotate them with Tracer.Omit\nAn IDE plugin for solving the renaming problem of changing objects positions.\n"},{"id":6,"href":"/ITWorks/docs/android/util-core/","title":"Util-core","section":"Android","content":" Contains only KLog at present, and would be expanded with some small practical tools in the future. Setup # dependenceis{ ... implementation (\u0026#34;io.github.shawxingkwok:android-util-core:1.0.1\u0026#34;) } AppContext trick # Design as below in your basic module: Don\u0026rsquo;t forget to declare your application name which may need to begin with the package name. In this way, your Database, DAO, NetService and some other tools could be also static, of which the profit is much more considerable than the additional resource memory.\nForeign static objects could be modified with mockk in tests. Companion extension trick # Declare static AppDatabase.INSTANCE based on AppContext and retrofit first, then DAO and Service could be created concisely. Call them easily. KLog # Main advantages # Tag is global and has a link. Logs on level V and D are cancelled after the current module releases. Light-weight. (2kb in jar) Modify logcat view # Extend the displayed tag length first. As for others, it\u0026rsquo;s my personal preferences. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Direct # obj\u0026rsquo;s type is Any? and printed out with its toString.\nOther levels # KLog.wtf is not provided. In my opinion, you\u0026rsquo;d better throw an error if fatal or use KLog.e if not.\nMore args # Tag prefix # Throwable # This is assignable only in KLog.e. Avoid tags too long # Make id, tagPrefix short, and avoid the file name too long, or else the link would fail. Special types # Useful KProperty0, common Array, and basic type arrays are specially handled, since their toString don\u0026rsquo;t tell values. In open source android library # Set an internal log object class. id should be an abbreviated or short all-caps library name for being easily distinguished from other tags. Remember to build the module if there is no directory \u0026lsquo;build\u0026rsquo;, or else you probably import BuildConfig from another library. Effect In each app submodule # Set a log class extended from KLog.InApp. Here sets id \u0026ldquo;DB\u0026rdquo;, supposing in the database module. Effect tag~:APP in the logcat could exclude logs from foreign libraries. Extend # Source code Take the example of overriding functions on level E.\nstackTrace in log is easily disturbed. Never call log indirectly like super... or set defaults for your function parameters. Or you could reference my concise fun log, KLog and design yourself.\nProvide position when inline # stackTrace is disturbed in inline functions and crossinline blocks. Specify tagPrefix with fileName in these cases. This problem also exists in links from other log libraries, and would be fixed by the kotlin standard library. Log out GitHub repo # "},{"id":7,"href":"/ITWorks/docs/multiplatform/kt-util/","title":"Kt util","section":"Multiplatform","content":" Setup # Repository: mavenCentral()\nDependency: \u0026quot;io.github.shawxingkwok:kt-util:1.0.2\u0026quot;\nDocument # GitHub repo # Release notes # Kt util # 1.0.1 # Remove the super interfaces ReadOnlyProperty from KReadOnlyProperty, and ReadWriteProperty from KReadWriteProperty.\nWhen KReadOnlyProperty was cast to ReadOnlyProperty, its function provideDelegate would not work, and neither onDelegate.\n1.0.2 # Solves a bug in fastLazy.\n"},{"id":8,"href":"/ITWorks/docs/jvm/tracer/road-map/long-term/","title":"Long term","section":"Road map","content":" Elements structure graph # This could be automatically generated background.\nLet hints \u0026lsquo;unused\u0026rsquo; unrelate to Tracer # For this example below, X and i are both later referenced by Tracer and are not grey anymore.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Highlighted name # It\u0026rsquo;s better for you to inject like private val bedroom get() = _Bedroom_House_masterBedroom in which Bedroom is expectedly displayed in another highlighted color.\nHidden hints # When you input code in a big project, too many tracer property name hints appear at present. (Only one in this example because this sample project is small)\n↓\nGenerated tracer property names wouldn\u0026rsquo;t appear until your input starts with _.\n"},{"id":9,"href":"/ITWorks/docs/jvm/tracer/usage/naming-rules/","title":"Naming rules","section":"Usage","content":" Position qualifiers # The code of model above is needless to see. For this injection:\nIn _Window_Bedroom_window\nWindow: type Bedroom: owner class name window: property name __ : beginning with __ means outside. In this case, __Door tells that referenced element is outside Bedroom.\n˚: Now we redesign Pillow as below. In class Cotton, tag after ˚ tells the nearest root or nodes. In addition, ˚ always appears when the corresponding root/nodes class is abstract/open, for being distinguished in subclasses as bar and x is traced below.\nType symbols conversion # Android forbids spaces and most original common symbols in property names, making me choose these substitutes ⍒ ❨ ❩ → ‹ › ？ ， ✶ → ↑ ↓ instead. Wildcard * would be tried converting to its bound and together with the covariance symbols ↑ ↓ if needed, like from from Array\u0026lt;*\u0026gt; to Array‹↓Any？› and List\u0026lt;*\u0026gt; to List‹Any？›. Comparable\u0026lt;*\u0026gt; is not convertible because its source code is Comparable\u0026lt;in T\u0026gt;.\nclass A{ class B } The nested class A.B would be converted to A․B in which ․ is not . Generic types # Generic types are converted to their bounds, and with covariance (out) if not redundant.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Multiple bounds # T has two bounds which can be expressed in the first generated property. However, the second property type is limited by Super and two bounds can\u0026rsquo;t be expressed, which is told by ✕ in the name.\n"},{"id":10,"href":"/ITWorks/docs/multiplatform/mvb/proposal/","title":"New UI design proposal","section":"MVB","content":" Abstract # The expected implementation requires official assistance to design visual operation interfaces. Goals are as below.\nA new UI design tool based on those traditional e.g. PhotoShop, Figma, which outputs view source code from designers directly usable by developers without inserting any code, including visually designed animations.\nA new imperative UI system with Kotlin multiplatform in which almost each component from the UI tool above has its corresponding Kotlin implementation. All developers need to do are bind view with dynamic data in Kt files, which could be optimized by MVB.\nIf this is implemented, it would reduce most code as well as negotiations between designers and developers, which is revolutionary without doubt. Some plugins (e.g. Zeplin) do a similar work but only support basic features and generates several versions of output code for each platform.\nThe Figma plugin relay is more powerful but outputs Compose which contains serious problems as blow.\nWorks couple between designers and developers. The recombination mechanism of Compose inevitably reconstructs massive objects, resulting in its low upper performance limit. Below are suggestions those simplify designs and help parse. Meanwhile, the generated layout code is the quickest in measurements. Many expected effects are explained with abstract words. Hope you to be patient. All positions reference to borders or dividers # All the traditional layouts are deprecated, e.g. frame, linear, relative, and constraint. Each component is added to the panel with default position limits. For example, when a TextView is added to the top-right area, and the panel which contains no dividers would show its distances to top and right borders. (This is by default and editable.) Besides, the distances are directly editable with mouse or keyboard in the panel. The two blue arrows should be removed.\nRelative positions are displayed but actually excluded # Now I add a button at the top-right area near the added TextView. It\u0026rsquo;s also linked to top and right borders by default. And the relative distance tagged with red line should also be displayed, but excluded in the background source code.\nIndependent components # Components can\u0026rsquo;t be constrained with each other, but multi-select-editable. Components from another file are seen as a single component.\nNew attributes panel # The attributes panel is replaced with source code of the selected component exception positions.\n-\u003e to manual code like There popups a progressbar when you type some attributes needing visual modifications like rotation and alpha.\nCustom shapes and animations # These are designed as in PhotoShop and Figma, but embeddable in mainstream systems and bound-able with foreign Kotlin data, except those too complicated. It sounds difficult but is doable for a qualified official team. Even if it\u0026rsquo;s not fully realized, this proposal is significant enough to beat other patterns.\n"},{"id":11,"href":"/ITWorks/docs/jvm/tracer/setup/","title":"Setup","section":"Tracer","content":"Configure with gradle as below.\nrepository: mavenCentral()\nplugin\nplugins{ // Minimum version: kt `1.8.0`, ksp `1.8.0-1.0.9`. // keep the prefix same with your kotlin version. // here supposes your kotlin plugin is at \u0026#39;1.8.0\u0026#39; id(\u0026#34;com.google.devtools.ksp\u0026#34;) version \u0026#34;1.8.0-1.0.9\u0026#34; } add this part directly, rather than insert messily. Groovy //region tracer // options // ksp.arg(\u0026#34;tracer.internal\u0026#34;, \u0026#34;\u0026#34;) tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kotlinOptions.freeCompilerArgs += \u0026#39;-Xcontext-receivers\u0026#39; } dependencies { implementation \u0026#39;io.github.shawxingkwok:tracer-annotations:1.0.0\u0026#39; ksp \u0026#39;io.github.shawxingkwok:tracer-compiler:1.0.0-1.0.0\u0026#39; } //endregion Kotlin //region tracer // options // ksp.arg(\u0026#34;tracer.internal\u0026#34;, \u0026#34;\u0026#34;) tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach { kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation (\u0026#34;io.github.shawxingkwok:tracer-annotations:1.0.0\u0026#34;) ksp (\u0026#34;io.github.shawxingkwok:tracer-compiler:1.0.0-1.0.0\u0026#34;) } //endregion For the library tracer-compiler, common version styles like 1.0.3 are deprecated. Use 1.0.0-1.0.0 instead, in which the former is anchored to the version of tracer-annotatinos. "},{"id":12,"href":"/ITWorks/docs/android/util-view/","title":"Util-view","section":"Android","content":" Setup # Groovy android{ buildFeatures { viewBinding true } } tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.8\u0026#39; } Kotlin android{ buildFeatures { viewBinding = true } } tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach { kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { implementation(\u0026#34;io.github.shawxingkwok:android-util-view:1.0.8\u0026#34;) } Functions # Flow.collectOnResumed # Is used in Fragment.onCreateView or Fragment.onViewCreated to collect flow with collector after every Fragment.onResume.\nSwitch from\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) viewLifecycleOwner.lifecycleScope.launch { repeatOnLifecycle(Lifecycle.State.RESUMED) { flow.collect { ... } } } } to\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) flow.collectOnResumed{ ... } } Flow.collectOnStarted # This is similar to Flow.collectOnResumed. View.onClick # Sets a View.OnClickListener with a more precise View. KRecyclerViewAdapter # Common cases # Take the example of this contact page.\nLayout resources are not displayed. The function binding(FragmentMainBinding::bind) is\nfrom another library and independent with KRecyclerViewAdapter.\nPartial update with oldContentId # This is only used in some special cases like items are massive or source data vary quite frequently like this stopwatch example.\nMore # Future functionalities # KRecyclerViewAdapter: drag, swipe and set stickHeader like Compose. GitHub repo # "},{"id":13,"href":"/ITWorks/docs/android/kdatastore/cn/","title":"中文","section":"KDataStore","content":" 简介 # 鉴于我所知道的安卓本地快捷存储方案如 SharedPreferences、MMKV、DataStore 都有明显的缺点，未能兼顾好安全、 性能、类型支持、和用法简易方便的程度，个人基于 DataStore 做了一个新的方案 KDataStore。\n主要有以下优化：\n单例模式 通过委托生成 key。 采用 MutbaleStateFlow 即时观察、同步读写、异步写入磁盘。 备份数据以处理异常。 优化了类型支持, 支持 Kotlin Serializable, 自定义, Nullable 详见 GitHub 仓库(含demo)。\n这份中文版本和 Java 支持主要用作初期宣传，在其他作品中并没有考虑。 在支持 IOS 之后会移到 Multiplatform 分组中。 竞品对比 # SharedPreferences MMKV DataStore KDataStore 性能 启动: 2.5ms 读取：耗时可忽略 commit写入: 堵塞2.3ms apply写入: 耗时可忽略，但不知道是否成功异步写入磁盘。 启动: 2.3ms 读写：耗时可忽略 都通过异步，故只测响应: 8.6ms 启动: 13.5ms 文件显著增加时影响不大，亦可先行在 Application中异步启动来解决。 读写：耗时可忽略 类型安全 否 否 是 是 除常见基本类型, String, Set\u0026lt;String\u0026gt; 外的类型支持 Parcelable 自定义\n但需放在独立的 DataStore 中 Kt Serializable (包括常见存储类型）\n自定义 读取异常 返回空的 HashMap, 即全部采用默认值 自行 catch 处理 启用备份文件 写入中遇 IOException 用未写入该数据的备份文件替换，且不再写入该数据。 如用 commit, 可通过返回的 false 获悉 仅 catch 不处理 记录，下次启动时从备份文件中更新 多进程 自行封装 支持 处于 1.1.0-alpha 阶段 在 DataStore 1.1.0 发布之后 多平台 不支持 支持 加密 自行封装 支持 自行封装 需自选加密协议，实现 cipher 额外优点 后台定时异步写入磁盘，ANR前一刻更新的数据不会丢失 体积小，jar on Android side 仅 12.6 kb 额外缺点 断电或者系统崩溃后容易丢失很多数据 比较新 建模时只能使用 Kotlin, 调用时可以使用 Java。 以上测试结果采用 30 份 String 数据，机型魅族18s, 源码见 KDataStore.benchmark。\n关于其他地方的存储方案对比分析，绝大多数都有严重错误。 官网相对准确，但也很片面。如想探究，建议自己测试并查阅源码。 基础用法 # 以切换主题的场景为例，使用 KDataStore 存储 Boolean 值代表当前主题。\n建模 # 单独分出一个 Android 模块, 常见命名为 settings。 后续文档中的命名均参考 settings。 如果不考虑从 Java 文件中调用，下图中的 @JvmStatic 则是不需要的。 关于 KDSFlow 安卓上的 actual KDSFlow 实现 调用 # 在其他模块中调用 view-kt 在 Activity/BasicActivity 中观察Flow/LiveData，绑定主题。 选中的 RadioButton 会随用户点击自动变化，根据 isDarkMOde.value 设置起始状态即可，不用绑定。 在 RadioGroup 监听中更新存值。 在 Fragment 中观察 Flow 时建议采用 collectOnResume。其配置工作在下文有包括。 view-java 在 Activity/BasicActivity 中观察 LiveData，绑定主题。 选中的 RadioButton 会随用户点击自动变化，根据 isDarkMode().getValue() 设置起始状态即可，不用绑定。 在 RadioGroup 监听中更新存值。 compose 将 state 和主题绑定\nRadioButton处更新存值\n配置 # 配置 build.gradle/build.gradle.kts 如下, 或参考 Github 上的 demo (其中有使用 version catalog)。\n根目录 # Groovy plugins{ ... id \u0026#39;org.jetbrains.kotlin.plugin.serialization\u0026#39; version \u0026#34;$version_kt\u0026#34; apply false } Kotlin plugins{ ... id (\u0026#34;org.jetbrains.kotlin.plugin.serialization\u0026#34;) version \u0026#34;$version_kt\u0026#34; apply false } 模型模块 # Groovy plugins { ... id \u0026#39;kotlinx-serialization\u0026#39; } dependencies { ... implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1\u0026#39; implementation \u0026#39;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kt-util:1.0.2\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; } Kotlin plugins { ... id (\u0026#34;kotlinx-serialization\u0026#34;) } dependencies { ... implementation (\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kt-util:1.0.2\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) } 调用方 # Groovy view-kt tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation \u0026#39;io.github.shawxingkwok:android-util-view:1.0.8\u0026#39; implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:本地模型模块名称\u0026#39;) // 或远程仓库 } view-java / compose dependencies{ ... implementation \u0026#39;io.github.shawxingkwok:kdatastore:1.0.0\u0026#39; implementation project(\u0026#39;:本地模型模块名称\u0026#39;) // 或远程仓库 } Kotlin view-kt tasks.withType\u0026lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u0026gt;().configureEach{ kotlinOptions.freeCompilerArgs += \u0026#34;-Xcontext-receivers\u0026#34; } dependencies { ... implementation (\u0026#34;shawxingkwok:android-util-view:1.0.8\u0026#34;) implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (project(\u0026#34;:本地模型模块名称\u0026#34;)) // 或远程仓库 } view-java / compose dependencies{ ... implementation (\u0026#34;io.github.shawxingkwok:kdatastore:1.0.0\u0026#34;) implementation (project(\u0026#34;:本地模型模块名称\u0026#34;)) // 或远程仓库 } 如果该调用模块使用了 startup-runtime, 要注意在 dependencies 中包含 KDataStoreInitializer::class.java。 类型支持 # kotlinx.serialization 用法类似 Java Serializable, 但多平台，且速度快两倍多。 被 Serializable 标记的 class, 基本类型，enum, Pair, IntArray, List 的默认实现等等均可视为 Serializable。\nNon-null 时需声明默认值。 Nullable 时默认值被限制为 null。 自定义时需实现与 Kt Serializable 之间的相互转换。(convert/recover) 在对象的内部修改并不会触发磁盘更新。\n迁移 # 类比下图格式（判断存在 -\u0026gt; 迁移 -\u0026gt; 删除）从其他存储仓库迁移过来。其中的 appContext 源自 KDataStore.\n比如取自 SharedPreferences 此外内置 delete, exist 两个函数辅助从 KDataStore 迁移到别处。 Kt Java 警告以防止误用，并无异常风险。\n可选参数 # 加密部分需从 Java 标准库或其他库中自选加密协议，实现 cipher。\n加密会将启动时间提升一倍左右。Android 在 api 29 版本引入了沙盒机制，实现了数据隔离，脱离加密也相对安全。 重置 # 全部 # Kt Java 局部 # 比如重置声明过的 isDarkMode Kt Settings.isDarkMode.reset() Java Settings.isDarkMode().reset(); "},{"id":14,"href":"/ITWorks/docs/jvm/tracer/usage/details/","title":"Details","section":"Usage","content":" Suggested code order # Lazy # Use lazy when you need to construct some objects based on common injected elements.\nOverride style # Put it at the bottom to look better. Use get() = instead of = to avoid null when passing args. Pass args # ↓\nTracer interface conversion # Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! This would be needless in the expected new syntax.\nElements built times display # Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Java, K/N \u0026amp; K/JS # Java, Kotlin/Native and Kotlin/JS are not supported, because they lack context receiver which is essential in this tool. But it\u0026rsquo;s absolutely safe to reference Java classes and functions in Kotlin files.\nInternally generated # Makes all generated code internal, which is commonly used in submodules. Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Partial traceable super types # Type alias # Alias types are always converted to its actual types.\n"},{"id":15,"href":"/ITWorks/docs/jvm/tracer/road-map/With-kcp/","title":"With Kcp","section":"Road map","content":" Automatic initial config # @Tracer.Root class House : HouseTracer{ override val _House get() = this } @Tracer.Nodes(House::class) class Bedroom(override val __House: House) : BedroomTracer { val bed = Bed() override val _Bedroom: Bedroom get() = this } context(BedroomTracer) class Bed{ private val house get() = __House } ↓\n@Tracer.Root class House @Tracer.Nodes(House::class) class Bedroom{ val bed = Bed() } context(BedroomTracer) class Bed{ private val house get() = __House } Automatic hidden generation # When you finish inputting val masterBedroom = Bedroom() in root class House, you could inject like private val bedroom get() = _Bedroom immediately without building.\nNullable elements are insides traceable and flexibly hinted # @Tracer.Root class A{ var b: B? = null private val name: String? get() = _String_C_name } class B{ val c = C() private val name: String get() = _String_C_name } class C{ val name = \u0026#34;Apollo\u0026#34; } "},{"id":16,"href":"/ITWorks/docs/jvm/tracer/usage/notes/","title":"Notes","section":"Usage","content":" Failed code inspection # Few generated types fail code inspection, mostly because of the imperfect official type. For the example below\nTherefore, I cast them in generated code.\nHowever, some types are incorrectly inferred and error shows even cast, whereas I forget those examples unfortunately. Use another source type or annotate them with Tracer.Omit.\nInaccurate * in typealias # * in alias types are all shifted first and then converted, which, however, may be inaccurate.\nFor source code\ninterface A\u0026lt;T: Iterable\u0026lt;String\u0026gt;\u0026gt; interface B\u0026lt;T: List\u0026lt;CharSequence\u0026gt;\u0026gt; typealias MyTypeAlias\u0026lt;T\u0026gt; = Pair\u0026lt;A\u0026lt;T\u0026gt;, B\u0026lt;T\u0026gt;\u0026gt; The real bound is List\u0026lt;String\u0026gt;, which is only one of those difficult cases. With Tracer, MyTypeAlias\u0026lt;*\u0026gt; is converted to Pair\u0026lt;A\u0026lt;*\u0026gt;, B\u0026lt;*\u0026gt;\u0026gt; first, and Pair\u0026lt;A\u0026lt;out Iterable\u0026lt;String\u0026gt;\u0026gt;, B\u0026lt;out List\u0026lt;CharSequence\u0026gt;\u0026gt;\u0026gt; next.\nThis could be fixed if one day kotlin requires generic bounds for typealias like\ntypealias MyTypeAlias\u0026lt;T: List\u0026lt;String\u0026gt;\u0026gt; = Pair\u0026lt;A\u0026lt;T\u0026gt;, B\u0026lt;T\u0026gt;\u0026gt; Never use special characters in class names # Class A•A is imported as `A•A` because of special symbols which, however, are hard to adapt. At present, Tracer doesn\u0026rsquo;t support this import style in the generated code.\n"},{"id":17,"href":"/ITWorks/docs/jvm/tracer/usage/practice/","title":"Practice","section":"Usage","content":"Practice with this relational graph and source code in Tracer.sample in which horsepower, engineCapacity, outTireRadius and innerTireRadius are flexible. "},{"id":18,"href":"/ITWorks/docs/jvm/tracer/usage/test/","title":"Test","section":"Usage","content":" Firstly learn mockk which also works for static objects. "},{"id":19,"href":"/ITWorks/post/about/","title":"About","section":"Post","content":"This website displays most of my personal open-source works in which Phone is the representative. Note that I center on Kotlin, and only Android.KDataStore considers Java supports.\nMy code is worth learning for its functionality, creativity, concision, structure, efficiency, and beauty. I also encourage those authorities to provide better tutorials with embedded short videos instead of all voluminous words and pictures.\nIn addition, if you are familiar with IT but feel hard to learn Kotlin and love Java or Go more, your logic ability may not be well enough for you to engage in IT. If so, do something you love and excel at. I have no offensive intention, just meaning everyone has their strengths and weaknesses, and every job has its threshold.\nAt last, my works are not all perfect. Some need plugins with visual interfaces, some are in the proposal stage, and there are some other wonderful ideas but not displayed. I need some top company to help complete and popularize. Welcome to visit my GitHub profile, or contact with me via email.\n"},{"id":20,"href":"/ITWorks/docs/jvm/tracer/github/","title":"Github repo","section":"Tracer","content":" "},{"id":21,"href":"/ITWorks/post/license/","title":"License","section":"Post","content":" This license applies to all the works on this website. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\nDefinitions.\n\u0026ldquo;License\u0026rdquo; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\u0026ldquo;Licensor\u0026rdquo; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\u0026ldquo;Legal Entity\u0026rdquo; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u0026ldquo;control\u0026rdquo; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\u0026ldquo;You\u0026rdquo; (or \u0026ldquo;Your\u0026rdquo;) shall mean an individual or Legal Entity exercising permissions granted by this License.\n\u0026ldquo;Source\u0026rdquo; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\u0026ldquo;Object\u0026rdquo; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\u0026ldquo;Work\u0026rdquo; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\u0026ldquo;Derivative Works\u0026rdquo; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\u0026ldquo;Contribution\u0026rdquo; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u0026ldquo;submitted\u0026rdquo; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u0026ldquo;Not a Contribution.\u0026rdquo;\n\u0026ldquo;Contributor\u0026rdquo; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n(d) If the Work includes a \u0026ldquo;NOTICE\u0026rdquo; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u0026quot;[]\u0026quot; replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u0026quot;printed page\u0026quot; as the copyright notice for easier identification within third-party archives. Copyright 2023 Shawxing Kwok\nLicensed under the Apache License, Version 2.0 (the \u0026ldquo;License\u0026rdquo;); you may not use this file except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n"},{"id":22,"href":"/ITWorks/post/sponsor/","title":"Sponsor","section":"Post","content":" Good taste. May God bless you! # Other mainstream payment methods would be supported in the near future.\n"}]